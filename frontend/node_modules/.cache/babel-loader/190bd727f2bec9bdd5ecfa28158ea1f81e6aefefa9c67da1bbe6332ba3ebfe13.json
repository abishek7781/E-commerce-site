{"ast":null,"code":"var _jsxFileName = \"D:\\\\New folder\\\\Abishek\\\\final project\\\\frontend\\\\src\\\\components\\\\Navbar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Navbar = ({\n  onSearch\n}) => {\n  _s();\n  const [listening, setListening] = useState(false);\n  const [recognition, setRecognition] = useState(null);\n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window)) {\n      console.warn('Speech Recognition API not supported');\n      return;\n    }\n    const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n    const recog = new SpeechRecognition();\n    recog.continuous = false;\n    recog.lang = 'en-US';\n    recog.interimResults = false;\n    recog.maxAlternatives = 1;\n    recog.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      onSearch(transcript);\n      setListening(false);\n    };\n    recog.onerror = event => {\n      console.error('Speech recognition error', event.error);\n      setListening(false);\n    };\n    recog.onend = () => {\n      setListening(false);\n    };\n    setRecognition(recog);\n  }, [onSearch]);\n  const toggleListening = () => {\n    if (listening) {\n      recognition.stop();\n      setListening(false);\n    } else {\n      recognition.start();\n      setListening(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"navbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-left\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        className: \"site-name\",\n        children: \"ShopSphere\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-right\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search products...\",\n        onChange: e => onSearch(e.target.value),\n        className: \"search-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleListening,\n        className: \"voice-search-button\",\n        title: \"Voice Search\",\n        children: listening ? 'üéôÔ∏è Listening...' : 'üé§'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Navbar, \"GtyIxgJAsEdw/pYrmrWPXwMnV8M=\");\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Navbar","onSearch","_s","listening","setListening","recognition","setRecognition","window","console","warn","SpeechRecognition","webkitSpeechRecognition","recog","continuous","lang","interimResults","maxAlternatives","onresult","event","transcript","results","onerror","error","onend","toggleListening","stop","start","className","children","href","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","value","onClick","title","_c","$RefreshReg$"],"sources":["D:/New folder/Abishek/final project/frontend/src/components/Navbar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Navbar = ({ onSearch }) => {\r\n  const [listening, setListening] = useState(false);\r\n  const [recognition, setRecognition] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!('webkitSpeechRecognition' in window)) {\r\n      console.warn('Speech Recognition API not supported');\r\n      return;\r\n    }\r\n    const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\r\n    const recog = new SpeechRecognition();\r\n    recog.continuous = false;\r\n    recog.lang = 'en-US';\r\n    recog.interimResults = false;\r\n    recog.maxAlternatives = 1;\r\n\r\n    recog.onresult = (event) => {\r\n      const transcript = event.results[0][0].transcript;\r\n      onSearch(transcript);\r\n      setListening(false);\r\n    };\r\n\r\n    recog.onerror = (event) => {\r\n      console.error('Speech recognition error', event.error);\r\n      setListening(false);\r\n    };\r\n\r\n    recog.onend = () => {\r\n      setListening(false);\r\n    };\r\n\r\n    setRecognition(recog);\r\n  }, [onSearch]);\r\n\r\n  const toggleListening = () => {\r\n    if (listening) {\r\n      recognition.stop();\r\n      setListening(false);\r\n    } else {\r\n      recognition.start();\r\n      setListening(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"navbar-left\">\r\n        <a href=\"/\" className=\"site-name\">ShopSphere</a>\r\n      </div>\r\n      <div className=\"navbar-right\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search products...\"\r\n          onChange={(e) => onSearch(e.target.value)}\r\n          className=\"search-input\"\r\n        />\r\n        <button onClick={toggleListening} className=\"voice-search-button\" title=\"Voice Search\">\r\n          {listening ? 'üéôÔ∏è Listening...' : 'üé§'}\r\n        </button>\r\n        {/* Other nav links and buttons */}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}