{"ast":null,"code":"var _jsxFileName = \"/Users/abishek/Documents/final_project/E-commerce-site/frontend/src/context/CartContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n\n  // Placeholder user email; replace with actual auth user email\n  const userEmail = 'user@example.com';\n\n  // Fetch saved cart items from backend on mount or userEmail change\n  useEffect(() => {\n    const fetchCart = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/cart/' + encodeURIComponent(userEmail));\n        if (!response.ok) {\n          throw new Error('Failed to fetch cart');\n        }\n        const data = await response.json();\n        setCartItems(data);\n      } catch (error) {\n        console.error('Error fetching cart:', error);\n      }\n    };\n    if (userEmail) {\n      fetchCart();\n    }\n  }, [userEmail]);\n\n  // Save cart items to backend whenever cartItems change\n  useEffect(() => {\n    const saveCart = async () => {\n      try {\n        await fetch('http://localhost:5001/api/cart', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_email: userEmail,\n            items: cartItems\n          })\n        });\n      } catch (error) {\n        console.error('Error saving cart:', error);\n      }\n    };\n    if (userEmail) {\n      saveCart();\n    }\n  }, [cartItems, userEmail]);\n  const addToCart = product => {\n    setCartItems(prevItems => {\n      const existingItem = prevItems.find(item => item.id === product.id);\n      if (existingItem) {\n        return prevItems.map(item => item.id === product.id ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item);\n      } else {\n        return [...prevItems, {\n          ...product,\n          quantity: 1\n        }];\n      }\n    });\n  };\n  const removeFromCart = productId => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      removeFromCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"jdONvkEabzLc64SbXgqXBHRMg9M=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","userEmail","fetchCart","response","fetch","encodeURIComponent","ok","Error","data","json","error","console","saveCart","method","headers","body","JSON","stringify","user_email","items","addToCart","product","prevItems","existingItem","find","item","id","map","quantity","removeFromCart","productId","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abishek/Documents/final_project/E-commerce-site/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const CartContext = createContext();\n\nexport const CartProvider = ({ children }) => {\n  const [cartItems, setCartItems] = useState([]);\n\n  // Placeholder user email; replace with actual auth user email\n  const userEmail = 'user@example.com';\n\n  // Fetch saved cart items from backend on mount or userEmail change\n  useEffect(() => {\n    const fetchCart = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/cart/' + encodeURIComponent(userEmail));\n        if (!response.ok) {\n          throw new Error('Failed to fetch cart');\n        }\n        const data = await response.json();\n        setCartItems(data);\n      } catch (error) {\n        console.error('Error fetching cart:', error);\n      }\n    };\n    if (userEmail) {\n      fetchCart();\n    }\n  }, [userEmail]);\n\n  // Save cart items to backend whenever cartItems change\n  useEffect(() => {\n    const saveCart = async () => {\n      try {\n        await fetch('http://localhost:5001/api/cart', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ user_email: userEmail, items: cartItems }),\n        });\n      } catch (error) {\n        console.error('Error saving cart:', error);\n      }\n    };\n    if (userEmail) {\n      saveCart();\n    }\n  }, [cartItems, userEmail]);\n\n  const addToCart = (product) => {\n    setCartItems((prevItems) => {\n      const existingItem = prevItems.find(item => item.id === product.id);\n      if (existingItem) {\n        return prevItems.map(item =>\n          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item\n        );\n      } else {\n        return [...prevItems, { ...product, quantity: 1 }];\n      }\n    });\n  };\n\n  const removeFromCart = (productId) => {\n    setCartItems((prevItems) => prevItems.filter(item => item.id !== productId));\n  };\n\n  return (\n    <CartContext.Provider value={{ cartItems, addToCart, removeFromCart }}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}